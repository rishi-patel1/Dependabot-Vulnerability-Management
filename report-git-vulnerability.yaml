---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: report-git-vulnerability
spec:
  params:
    - name: event-payload
      description: The payload from the webhook request 
    - name: send-alert
      description: Specify if you want to send slack alert or not. Can be 0 or 1
    - name: task-pvc
      description: the task pvc - this is the volume where the files (Dockerfile
        etc..) are expected to be
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline
        context secrets
      default: cd-secret
  steps:
    - name: report-git-vulnerability
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.23
      workingDir: /artifacts
      env:
        - name: EVENT_PAYLOAD
          value: $(params.event-payload)
        - name: SEND_ALERT
          value: $(params.send-alert)
        - name: SLACK_URL
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: slackUrl
        - name: GIT_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: gitToken
        - name: PIPELINE_RUN_URL
          valueFrom: 
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']
        - name: TRIGGER_TYPE
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-type']
        - name: TRIGGERED_BY
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
      command: ["/bin/bash", "-c"]
      args:
        - |
          set -e -o pipefail
          echo "-----------------------------------------------------------------------------"
          # Checking its trigger by timer, scm or manual, w.r.t inventory decide to use
          if [[ "$TRIGGER_TYPE" == "generic" ]]; then
            echo "INFO : This is Trigger by generic SCM (github/gitlab webhook) ..."; TRIGGERED_BY="Generic"
            echo "INFO : TRIGGER_TYPE=$TRIGGER_TYPE and PIPELINE_RUN_URL=$PIPELINE_RUN_URL and TRIGGERED_BY=$TRIGGERED_BY"
          elif [[ "$TRIGGER_TYPE" == "timer" ]]; then
            echo "INFO :: This is Trigger by timer ..."; TRIGGERED_BY="Timer"
            echo "INFO :: TRIGGER_TYPE=$TRIGGER_TYPE and PIPELINE_RUN_URL= $PIPELINE_RUN_URL and TRIGGERED_BY= $TRIGGERED_BY"
          else
            TRIGGERED_BY=$(echo $TRIGGERED_BY | tr "[:upper:]" "[:lower:]")
            echo "INFO : TRIGGER_TYPE=$TRIGGER_TYPE and TRIGGERED_BY=$TRIGGERED_BY"
          fi
          echo "-----------------------------------------------------------------------------"


          ACTION=$(echo $EVENT_PAYLOAD | jq -r '.action')
          echo The action is $ACTION
          AFFECTED_PACKAGE_NAME=$(echo $EVENT_PAYLOAD | jq -r '.alert.affected_package_name')
          AFFECTED_RANGE=$(echo $EVENT_PAYLOAD | jq -r '.alert.affected_range')
          FIXED_IN=$(echo $EVENT_PAYLOAD | jq -r '.alert.fixed_in')
          SEVERITY=$(echo $EVENT_PAYLOAD | jq -r '.alert.severity')
          EXTERNAL_REFERENCE=$(echo $EVENT_PAYLOAD | jq -r '.alert.external_reference')
          EXTERNAL_IDENTIFIER=$(echo $EVENT_PAYLOAD | jq -r '.alert.external_identifier')
          GHSA_ID=$(echo $EVENT_PAYLOAD | jq -r '.alert.ghsa_id')
          CREATED_AT=$(echo $EVENT_PAYLOAD | jq -r '.alert.created_at')
          ISSUE_ORG=$(echo $EVENT_PAYLOAD | jq -r '.organization.login')
          ISSUE_REPO=$(echo $EVENT_PAYLOAD | jq -r '.repository.name')
          ISSUE_REPO_URL=$(echo $EVENT_PAYLOAD | jq -r '.repository.html_url')
          SEVERITY="$(echo "${SEVERITY}" | awk '{print toupper(substr($0,1,1)) substr($0,2)}')"
          id="<\!subteam^S014HGW2QJ0>"
          groupId=$(echo $id|sed 's@\\@@g')
          if [[ $SEVERITY == "High" ]] ||  [[ $SEVERITY == "Critical" ]]; then
            DUE_DATE=$(date -d "15 days" +%Y-%m-%d)
            TIME_ALLOWED='15'
          else
            DUE_DATE=$(date -d "45 days" +%Y-%m-%d)
            TIME_ALLOWED='45'
          fi
          repoUrl=https://api.github.ibm.com/repos/$ISSUE_ORG/$ISSUE_REPO

          create_issue(){
            echo "Issue doesn't exist, Create Issue"
            BODY="## $EXTERNAL_IDENTIFIER - $SEVERITY Severity Vulnerability\n\n<img src='https://whitesource-resources.whitesourcesoftware.com/vulnerability_details.png' width=19 height=20> Vulnerable Library - <b>$AFFECTED_PACKAGE_NAME</b></p>\n<p></p>\n<details><summary><img src='https://whitesource-resources.whitesourcesoftware.com/medium_vul.png' width=19 height=20> Vulnerability Details</summary>\n<p> \n<p>Publish Date: $CREATED_AT</p>\n<p>URL: <a href=https://www.mend.io/vulnerability-database/$EXTERNAL_IDENTIFIER>$EXTERNAL_IDENTIFIER</a></p>\n</p>\n</details>\n<p></p>\n<details><summary><img src='https://whitesource-resources.whitesourcesoftware.com/cvss3.png' width=19 height=20> CVSS 3 Score Details</summary>\nFor more information on CVSS3 Scores, click <a href="https://www.first.org/cvss/calculator/3.0">here</a>.\n</p>\n</details>\n<p></p>\n<details><summary><img src='https://whitesource-resources.whitesourcesoftware.com/suggested_fix.png' width=19 height=20> Suggested Fix</summary>\n<p>\n<p>Type: Upgrade version</p>\n<p>Origin: <a href=https://www.cve.org/CVERecord?id=$EXTERNAL_IDENTIFIER>$EXTERNAL_IDENTIFIER<a/> </p>\n<p>Release Date: $CREATED_AT</p>\n<p>Fix Resolution: $AFFECTED_PACKAGE_NAME - $FIXED_IN</p>\n</p>\n</details>\n<p> Look at Dependabot Alerts in the repository for more information </p>\n<p></p>"
            echo '{
                    "title": "'$EXTERNAL_IDENTIFIER' ('$SEVERITY') detected in '$AFFECTED_PACKAGE_NAME'",
                    "body": "'$BODY'",
                    "labels": ["'$EXTERNAL_IDENTIFIER'","dueDate:'$DUE_DATE'"]
                }' > createissue.txt
            curl -s -H "Authorization: token $GIT_TOKEN"  -X POST   -d "@createissue.txt" $repoUrl/issues > postoutput.txt
            issueNumber=$(jq -r '.number' postoutput.txt)
          }

          close_git_issue(){
            echo "closing git issue"
            issueNumber=$(curl -s -H "Authorization: token $GIT_TOKEN" https://github.ibm.com/api/v3/search/issues?q=''${EXTERNAL_IDENTIFIER}'+in:title+author:appauto+repo:'${ISSUE_ORG}'/'${ISSUE_REPO}'+state:open' | jq -r '.items[].number')                
            if [[ -z $issueNumber ]] || [[ "$issueNumber" == "null" ]]; then
              echo "issue doesnt exist"
            else
              echo '{
                "body": "Vulnerability has been remediated, closing the issue"
              }' > comment.txt
              curl -s -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GIT_TOKEN" $repoUrl/issues/$issueNumber/comments -d "@comment.txt"

              echo '{
                "state": "close"
              }' > test.txt
              curl -s -H "Authorization: token $GIT_TOKEN"  -X PATCH  -d "@test.txt" $repoUrl/issues/$issueNumber
            fi
          }

          send_slack_alert(){
            jobName='Github Vulnerability Alert'
            LINK_TO_ISSUE="https://github.ibm.com/$ISSUE_ORG/$ISSUE_REPO/issues/$issueNumber"
            echo "======================== SENDING ALERT ON SLACK ================================="
            if [[ -z $issueNumber ]] || [[ "$issueNumber" == "null" ]]; then
            exit 
            fi
            if [[ $ACTION == "create" ]]; then
              SLACK_CONTENT="{'text': ':alert: *$jobName* :alert:\nHi $groupId team, need your attention. A new vulnerability is detected in <$ISSUE_REPO_URL|$ISSUE_REPO>. \n*$EXTERNAL_IDENTIFIER* | *Severity*: $SEVERITY | *Affected Package Name*: $AFFECTED_PACKAGE_NAME | *Affected Package Range*: $AFFECTED_RANGE | *Fixed in*: $FIXED_IN \nThe <$LINK_TO_ISSUE|issue> is due - $DUE_DATE. | <$PIPELINE_RUN_URL| See the Pipeline logs> | Trigger by $TRIGGERED_BY'}"
              curl -s -d "payload=$SLACK_CONTENT" $SLACK_URL
            elif [[ $ACTION == "resolve" ]]; then
              SLACK_CONTENT="{'text': '*$jobName*\n:successful:$EXTERNAL_IDENTIFIER is remediated in <$ISSUE_REPO_URL|$ISSUE_REPO>.\n Closing the git issue <$LINK_TO_ISSUE|$issueNumber> | <$PIPELINE_RUN_URL| See the Pipeline logs> | Trigger by $TRIGGERED_BY'}"
              curl -s -d "payload=$SLACK_CONTENT" $SLACK_URL
            fi
          }

          if [[ $ACTION == "create" ]]; then
            echo 'Checking if Issue already exists'
            issueNumber=$(curl -s -H "Authorization: token $GIT_TOKEN" https://github.ibm.com/api/v3/search/issues?q='label:'${EXTERNAL_IDENTIFIER}'+type:issue+repo:"'${ISSUE_ORG}'/'${ISSUE_REPO}'"+state:open&per_page=500' | jq -r '.items[].number')                 
            if [[ -z $issueNumber ]] || [[ "$issueNumber" == "null" ]]; then
                create_issue
                if (( $SEND_ALERT == 1 )); then
                  send_slack_alert
                fi
            else
                echo issue Number : $issueNumber
                echo "Issue exists"
            fi
          elif [[ $ACTION == "resolve" ]]; then
            close_git_issue
            if (( $SEND_ALERT == 1 )); then
              send_slack_alert
            fi
          else
            echo "Task not needed"
          fi
          